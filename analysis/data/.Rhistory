# Rename some vectors to be machine readable
names(df)[1] <- "Participant"
here()
library(ggplot2)
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/Éª/-bias",7),rep("/É/-bias",7)),
"talker"=c(rep("Familiar",14),rep("Novel-Generalization",14),rep("Novel-No Generalization",14)))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
library(ggplot2)
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/Éª/-bias",7),rep("/É/-bias",7)),
"talker"=c(rep("Trained",14),rep("Novel-Generalization",14),rep("Novel-No Generalization",14)))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
library(ggplot2)
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/ɛ/-bias",7),rep("/ɪ/-bias",7)),
"talker"=c(rep("Trained",14),rep("Novel-Generalization",14),rep("Novel-No Generalization",14)))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
View(hypo)
levels(hypo$talker)
hypo$talker <- factor(hypo$talker,levels=c("Trained","Novel-Generalization","Novel-No Generalization"))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/ɪ/-bias,7"),rep("/ɛ/-bias",7)),
"talker"=c(rep("Trained",14),rep("Novel-Generalization",14),rep("Novel-No Generalization",14)))
hypo$talker <- factor(hypo$talker,levels=c("Trained","Novel-Generalization","Novel-No Generalization"))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/ɪ/-bias",7),rep("/ɛ/-bias",7)),
"talker"=c(rep("Trained",14),rep("Novel-Generalization",14),rep("Novel-No Generalization",14)))
hypo$talker <- factor(hypo$talker,levels=c("Trained","Novel-Generalization","Novel-No Generalization"))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
library(ggplot2)
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/ɛ/-bias",7),rep("/ɪ/-bias",7)),
"talker"=c(rep("Trained",14),rep("Novel-Generalization",14),rep("Novel-No Generalization",14)))
hypo$talker <- factor(hypo$talker,levels=c("Trained","Novel-Generalization","Novel-No Generalization"))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zeck' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.title = element_blank())
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zeck' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.15),
text=element_text(size=22),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank())
library(ggplot2)
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/E/-bias",7),rep("/I/-bias",7)),
"talker"=c(rep("Trained Talker",14),
rep("Novel Talker with \n\ Accent (Generalization)",14),
rep("Novel Talker with \n\ No Accent (No Generalization)",14)))
hypo$talker <- factor(hypo$talker,levels=c("Trained Talker",
"Novel Talker with \n\ Accent (Generalization)",
"Novel Talker with \n\ No Accent (No Generalization)"))
exp1A <- ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_color_discrete("Bias",labels=c("/I/-bias","/E/-bias")) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") + ggtitle("Experiment 1A") +
theme(legend.position = c(.90, 0.2),
text=element_text(size=14),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank(),
axis.title.x = element_blank())
exp1A
library(ggplot2)
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/E/-bias",7),rep("/I/-bias",7)),
"talker"=c(rep("Trained Talker",14),
rep("Novel Talker (Generalization)",14),
rep("Novel Talker (No Generalization)",14)))
hypo$talker <- factor(hypo$talker,levels=c("Trained Talker",
"Novel Talker with (Generalization)",
"Novel Talker with (No Generalization)"))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_color_discrete("Bias",labels=c("/I/-bias","/E/-bias")) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") + ggtitle("Experiment 1A") +
theme(legend.position = c(.90, 0.2),
text=element_text(size=14),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank(),
axis.title.x = element_blank())
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_color_discrete("Bias",labels=c("/I/-bias","/E/-bias")) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") + ggtitle("Experiment 1A") +
theme(legend.position = c(.90, 0.2),
text=element_text(size=14),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank())
library(ggplot2)
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/E/-bias",7),rep("/I/-bias",7)),
"talker"=c(rep("Trained Talker",14),
rep("Novel Talker (Generalization)",14),
rep("Novel Talker (No Generalization)",14)))
hypo$talker <- factor(hypo$talker,levels=c("Trained Talker",
"Novel Talker (Generalization)",
"Novel Talker (No Generalization)"))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_color_discrete("Bias",labels=c("/I/-bias","/E/-bias")) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") + ggtitle("Experiment 1A") +
theme(legend.position = c(.90, 0.2),
text=element_text(size=14),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank())
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_color_discrete("Bias",labels=c("/I/-bias","/E/-bias")) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.2),
text=element_text(size=14),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank())
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_color_discrete("Bias",labels=c("/I/-bias","/E/-bias")) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.2),
text=element_text(size=20),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank())
hypo <- data.frame("step"=c(rep(1:7,6)),
"resp"=c(rep(c(0,0,.25,.55,.95,1,1,
0,0,.05,.25,.55,1,1),2),
0,0,.25,.55,.95,1,1,
0,0,.23,.53,.93,1,1),
"bias"=c(rep("/E/-bias",7),rep("/I/-bias",7)),
"talker"=c(rep("Trained",14),
rep("Novel (Generalization)",14),
rep("Novel (No Generalization)",14)))
hypo$talker <- factor(hypo$talker,levels=c("Trained",
"Novel (Generalization)",
"Novel (No Generalization)"))
ggplot(hypo,aes(x=step,y=resp,color=bias)) +
geom_line(aes(color=bias),size=1)  +
geom_point(aes(color=bias),size=2) + theme_bw() +
facet_wrap(~talker) +
scale_color_discrete("Bias",labels=c("/I/-bias","/E/-bias")) +
scale_y_continuous(breaks = c(0,0.25,.5,0.75,1),labels=c(0,25,50,75,100)) +
scale_x_continuous(breaks=c(1:7),labels=c("1","2","3","4","5","6","7")) +
ylab("% 'Zick' responses") + xlab("'Zeck'-'Zick' continuum step") +
theme(legend.position = c(.90, 0.2),
text=element_text(size=20),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key.size = unit(0.25, "cm"),
legend.key = element_blank(),
legend.title = element_blank())
citation
citation()
reticulate::repl_python()
import numpy as np
yes
import numpy as np
import pandas as pd
pip install pandas
install pandas
conda install pandas
pip install pandas
conda install pandas
pip install pandas
conda install pandas
pip install numpy pandas matplotlib
virtualenv python
py_install("pandas")
library(reticulate)
library(reticulate)
library(reticulate)
quit
rm(list = ls())
# Data manipulation.
library(tidyverse)
library(reticulate)
py_install("pandas")
py_install("numpy")
reticulate::repl_python()
import numpy as np
import pandas as pd
from sklearn.datasets import load_boston
data_set = pd.DataFrame({'Name' : ["Sam","Paul","Tracy","Peter"],
'Hair_Colour' : ["Brown","White","Black","Black"],
'Score' : [45,89,34,39]})
data_set = pd.DataFrame({'Name' : ["Sam","Paul","Tracy","Peter"],
'Hair_Colour' : ["Brown","White","Black","Black"],
'Score' : [45,89,34,39]})
data_set
droplevels()
?droplevels
setwd("C:/Users/David/Desktop/GitHubRepos/TalkerTeam-Mapping/analysis")
rm(list = ls(all = TRUE))
# Load packages.
# Data manipulation.
library(data.table)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
library(parallel)
# Plots.
library(ggplot2)
library(cowplot)
library(ggsignif)
library(lemon)
# Analyses.
library(afex)
library(lme4)
library(emmeans)
theme_set(theme_bw())
# set WD to data folder.
setwd("./data")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
df <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
data$response <- lead(data$response_response, 1) #shifts responses one row up since OpenSesame logs them a row down
data$response_time <- lead(data$response_time_response, 1) #shifts RTs one row up since OpenSesame logs them a row down
df <- rbind(df, data,fill=T)
}
#### Clean up data. ####
# Remove errant row created in previous step
df <- subset(df,subject_nr!=1)
# Remove columns related to audio onset that were in for debugging purposes
df <- select(df,-9:-26)
# Remove columns where responses/RTs were logged incorrectly by OpenSesame
df <- select(df,-6:-7)
# Create variable to indicate if it was male or female talker on trial
df$gender <- ifelse(grepl("M_",df$current_stimulus),"Male","Female")
# Create variable to indicate which experiment this was
df$exp_orig <- substr(df$subject_nr,1,1) #first digit of subject number indicates experiment number
# Renumbered experiments for manuscript
df$exp_renum <- NA
df$exp_renum[which(df$exp_orig == 1)] <- 1
df$exp_renum[which(df$exp_orig == 2)] <- 4
df$exp_renum[which(df$exp_orig == 3)] <- 3
df$exp_renum[which(df$exp_orig == 4)] <- 2
# Indicate which item number this was within a trial
df$itemNo <- row(as.matrix(df$current_stimulus)) %% 16; df$itemNo[which(df$itemNo==0)] <- 16
# Indicate if there is a talker change for this item (is preceding item spoken by same talker?)
df$change <- ifelse(lag(df$gender) == df$gender,"no","yes")
# Create variable to add row number for next step
df <- df[order(as.numeric(Trial)),]
df <- df[order(subject_nr),]
df$row <- as.numeric(1:length(df$Trial))
# Responses within lag time (150 ms in M&N 2007) are counted as responses to the previous item
df$corrected_rt <- as.numeric(df$response_time)
df$corrected_rt[which(df$response_time<=150 & df$itemNo > 1)-1] <- df$corrected_rt[which(df$response_time<=150 & df$itemNo > 1)] + 750
df$corrected_rt[which(df$corrected_rt<=150)] <- NA
df <- df %>% drop_na(response)
# Keep only trials in which audio matches target.
df$trial_stimulus <- substr(df$current_stimulus,3,nchar(df$current_stimulus)-4)
df$trialtype <- ifelse(df$Target==df$trial_stimulus,"Target","Distractor")
# Calculate accuracy in obvious way.
df$accuracy <- ifelse(df$trialtype=="Target"&df$response=="space"|df$trialtype=="Distractor"&df$response=="None",1,0)
# Separate target trials for RT analysis.
target.trials <- subset(df,df$Target==df$trial_stimulus)
# Remove target trials where participants hit wrong key.
target.trials <- subset(target.trials,target.trials$response=="None"|target.trials$response=="space")
# Keep trials where participant responded immediately after the target trial.
a <- (which(df$Target==df$trial_stimulus&df$response=="None")+1)
missed.targets <- df[a]
missed.targets <- subset(missed.targets, as.numeric(response_time) <= 150)
# Calculate accuracy for complex trials (response in trial after target)
df$accuracy <- ifelse(df$row %in% missed.targets$row,NA,df$accuracy)
df$accuracy <- ifelse(df$row %in% (missed.targets$row-1),1,df$accuracy)
# Remove trials where participants didn't respond in the post-target trial.
# b <- (which(missed.targets$response=="None"))
# c <- missed.targets[b,row]-1
# target.trials <- subset(target.trials,!(row %in% c))
missed.targets <- subset(missed.targets,response=="space")
# Combine these together into single data frame.
critical.trials <- rbind(target.trials,missed.targets)
# Set variables as appropriate types.
critical.trials$Condition <- as.factor(critical.trials$Condition)
critical.trials$Talker <- as.factor(critical.trials$Talker)
critical.trials$response <- as.factor(critical.trials$response)
critical.trials$response_time <- as.numeric(critical.trials$response_time)
critical.trials$subject_nr <- as.factor(critical.trials$subject_nr)
# Order by row number.
critical.trials <- critical.trials[order(row),]
#  Now we can now remove the trials after the target.
critical.trials <- subset(na.omit(critical.trials),Target==trial_stimulus)
#### Outcomes of interest. ####
# Calculate accuracy.
performance <- df %>%
group_by(subject_nr,exp_renum) %>%
summarize(acc=mean(na.omit(accuracy)))
exclude <- filter(performance,acc<=0.9)
critical.trials <- droplevels(critical.trials %>%
filter(!subject_nr %in% exclude$subject_nr))
df.goodSubj <- droplevels(df %>%
filter(!subject_nr %in% exclude$subject_nr))
# Average performance by experiment.
avg.performance <- df.goodSubj %>%
group_by(exp_renum) %>%
summarize(acc=mean(na.omit(accuracy)))
# Range
performance %>% group_by(exp_renum) %>%
filter(acc>=0.9) %>%
summarise(low=min(acc),high=max(acc))
# Calculate reaction time by condition and talker.
rt <- critical.trials %>%
group_by(exp_renum, Condition) %>%
summarise(rt=mean(corrected_rt),SD=sd(corrected_rt))
critical.trials$exp_renum <- as.factor(critical.trials$exp_renum)
critical.trials$targRecyc <- NA
critical.trials$targRecyc[critical.trials$exp_renum == "1" | critical.trials$exp_renum == "4"] <- "Yes"
critical.trials$targRecyc[critical.trials$exp_renum == "2" | critical.trials$exp_renum == "3"] <- "No"
critical.trials$targRecyc <- as.factor(critical.trials$targRecyc)
critical.trials$nrTargTalkMixed <- NA
critical.trials$nrTargTalkMixed[critical.trials$exp_renum == "1" | critical.trials$exp_renum == "3"] <- "Two"
critical.trials$nrTargTalkMixed[critical.trials$exp_renum == "2" | critical.trials$exp_renum == "4"] <- "One"
critical.trials$nrTargTalkMixed <- as.factor(critical.trials$nrTargTalkMixed)
Rmisc::summarySE(data=subset(critical.trials,Condition=="Mixed"),measurevar = "corrected_rt",
groupvars = "targRecyc")
Rmisc::summarySE(data=subset(critical.trials,Condition=="Mixed"),measurevar = "corrected_rt",
groupvars = "nrTargTalkMixed")
Rmisc::summarySE(data=subset(critical.trials,Condition=="Mixed"),measurevar = "corrected_rt",
groupvars = "exp_renum")
Rmisc::summarySE(critical.trials,measurevar = "corrected_rt",
groupvars = "targRecyc")
Rmisc::summarySE(critical.trials,measurevar = "corrected_rt",
groupvars = "exp_renum")
Rmisc::summarySE(critical.trials,measurevar = "corrected_rt",
groupvars = c("Condition","exp_renum"))
