labs(y = "Reaction time (ms)") + coord_cartesian(ylim = c(375,725)) +
theme(legend.position = "none",strip.text = element_text(size = 16),text=element_text(size=18))
# Create behavioral data figure.
#behav_fig <-
ggplot(rt_summary, aes(CondNum, corrected_rt, fill=Condition)) +
geom_boxplot(aes(group=Condition,fill=Condition),width=0.4,color="black") +
#geom_bar(stat="summary",width=0.4,aes(group=Condition,fill=Condition)) +
geom_point(data=rt_summary,aes(x=xPos),color="black") +
geom_line(data=rt_summary,aes(group=subject_nr,x=xPos),stat="summary",color="black") +
#geom_errorbar(data=rt_summary_byGroup,aes(ymax=corrected_rt+ci, ymin = corrected_rt-ci), width = 0.2) +
stat_summary(fun=mean, geom="point", shape=1, size=3) +
scale_x_continuous("Condition",breaks=c(1,2),labels=c("Blocked","Mixed")) +
scale_fill_manual(values=c("#ff6e26","#26b7ff")) +
facet_rep_wrap(.~exp_renum,ncol=2,repeat.tick.labels=TRUE) +
labs(y = "Reaction time (ms)") + coord_cartesian(ylim = c(375,725)) +
theme(legend.position = "none",strip.text = element_text(size = 16),text=element_text(size=18))
# Create behavioral data figure.
#behav_fig <-
ggplot(rt_summary, aes(CondNum, corrected_rt, fill=Condition)) +
geom_boxplot(aes(group=Condition,fill=Condition),width=0.4,color="black") +
#geom_bar(stat="summary",width=0.4,aes(group=Condition,fill=Condition)) +
geom_point(data=rt_summary,aes(x=xPos),color="black") +
geom_line(data=rt_summary,aes(group=subject_nr,x=xPos),stat="summary",color="black") +
#geom_errorbar(data=rt_summary_byGroup,aes(ymax=corrected_rt+ci, ymin = corrected_rt-ci), width = 0.2) +
stat_summary(fun=mean, geom="point", shape=1, size=3,color="black") +
scale_x_continuous("Condition",breaks=c(1,2),labels=c("Blocked","Mixed")) +
scale_fill_manual(values=c("#ff6e26","#26b7ff")) +
facet_rep_wrap(.~exp_renum,ncol=2,repeat.tick.labels=TRUE) +
labs(y = "Reaction time (ms)") + coord_cartesian(ylim = c(375,725)) +
theme(legend.position = "none",strip.text = element_text(size = 16),text=element_text(size=18))
ggsave("behav_fig.png",device="png",type="cairo",dpi="retina",width = 10, height = 12)
ggsave("behav_fig.png",device="png",type="cairo",dpi="retina",width = 8, height = 6)
ggsave("behav_fig.png",device="png",type="cairo",dpi="retina",width = 9, height = 6)
ggsave("behav_fig.png",device="png",type="cairo",dpi="retina",width = 9, height = 7)
ggsave("behav_fig.png",device="png",type="cairo",dpi="retina",width = 10, height = 7)
# Create behavioral data figure.
behav_fig <-
ggplot(rt_summary, aes(CondNum, corrected_rt, fill=Condition)) +
geom_boxplot(aes(group=Condition,fill=Condition),width=0.4,color="black") +
#geom_bar(stat="summary",width=0.4,aes(group=Condition,fill=Condition)) +
geom_point(data=rt_summary,aes(x=xPos),color="black") +
geom_line(data=rt_summary,aes(group=subject_nr,x=xPos),stat="summary",color="black") +
#geom_errorbar(data=rt_summary_byGroup,aes(ymax=corrected_rt+ci, ymin = corrected_rt-ci), width = 0.2) +
stat_summary(fun=mean, geom="point", shape=1, size=3,color="black") +
scale_x_continuous("Condition",breaks=c(1,2),labels=c("Blocked","Mixed")) +
scale_fill_manual(values=c("#ff6e26","#26b7ff")) +
facet_rep_wrap(.~exp_renum,ncol=2,repeat.tick.labels=TRUE) +
labs(y = "Reaction time (ms)") + coord_cartesian(ylim = c(375,725)) +
theme(legend.position = "none",strip.text = element_text(size = 16),text=element_text(size=18))
MTPC <-
ggplot(rt_differences,aes(x=as.factor(exp_renum),y=diff)) +
geom_bar(stat="identity",fill="#4b4f57") + geom_errorbar(aes(ymax=diff+se,ymin=diff-se),color="black",width=0.5) +
labs(y="Multi-talker processing cost (ms)", x="Experiment") +
theme(legend.position = "none",text=element_text(size=16)) + coord_cartesian(ylim=c(0,30)) +
geom_signif(xmin=1,xmax=1,y_position=27,tip_length=0,annotation ="*",textsize=8,color="black") +
geom_signif(xmin=3,xmax=3,y_position=27,tip_length=0,annotation ="*",textsize=8,color="black")
ggsave("MTPC.png",device="png",type="cairo",dpi="retina")
# Cowplot them together.
plot_grid(behav_fig,MTPC,labels="AUTO",ncol=1,rel_heights = c(2,1))
# Line plot of individual MTE
ggplot(rt_summary,aes(x=Condition,y=corrected_rt)) + geom_point() +
geom_line(aes(group=subject_nr),stat="summary") + theme(legend.position="none") +
facet_wrap(~exp_renum) + labs(y = "Reaction time (ms)")
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 8, height = 10)
# Cowplot them together.
plot_grid(behav_fig,MTPC,labels="AUTO",ncol=1,rel_heights = c(2,1))
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 8, height = 10)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 8, height = 12)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 10)
# Cowplot them together.
plot_grid(behav_fig,MTPC,labels="AUTO",ncol=1,rel_heights = c(2,1.5))
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 10)
# Cowplot them together.
plot_grid(behav_fig,MTPC,labels="AUTO",ncol=1,rel_heights = c(2,1.1))
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 10)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Cowplot them together.
plot_grid(behav_fig,MTPC,labels="AUTO",ncol=1,rel_heights = c(2,1.1),label_size = 16)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Cowplot them together.
plot_grid(behav_fig,MTPC,labels="AUTO",ncol=1,rel_heights = c(2,1.1),label_size = 18)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=1,rel_heights = c(1.1,2),label_size = 18)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Create behavioral data figure.
behav_fig <-
ggplot(rt_summary, aes(CondNum, corrected_rt, fill=Condition)) +
geom_boxplot(aes(group=Condition,fill=Condition),width=0.4,color="black") +
#geom_bar(stat="summary",width=0.4,aes(group=Condition,fill=Condition)) +
geom_point(data=rt_summary,aes(x=xPos),color="black") +
geom_line(data=rt_summary,aes(group=subject_nr,x=xPos),stat="summary",color="black") +
#geom_errorbar(data=rt_summary_byGroup,aes(ymax=corrected_rt+ci, ymin = corrected_rt-ci), width = 0.2) +
stat_summary(fun=mean, geom="point", shape=1, size=3,color="black") +
scale_x_continuous("Condition",breaks=c(1,2),labels=c("Blocked","Mixed")) +
scale_fill_manual(values=c("#ff6e26","#26b7ff")) +
facet_rep_wrap(.~exp_renum,ncol=2,repeat.tick.labels=TRUE) +
labs(y = "Reaction time (ms)") + coord_cartesian(ylim = c(375,725)) +
theme(legend.position = "none",strip.text = element_text(size = 16),text=element_text(size=20))
MTPC <-
ggplot(rt_differences,aes(x=as.factor(exp_renum),y=diff)) +
geom_bar(stat="identity",fill="#4b4f57") + geom_errorbar(aes(ymax=diff+se,ymin=diff-se),color="black",width=0.5) +
labs(y="Multi-talker processing cost (ms)", x="Experiment") +
theme(legend.position = "none",text=element_text(size=20)) + coord_cartesian(ylim=c(0,30)) +
geom_signif(xmin=1,xmax=1,y_position=27,tip_length=0,annotation ="*",textsize=8,color="black") +
geom_signif(xmin=3,xmax=3,y_position=27,tip_length=0,annotation ="*",textsize=8,color="black")
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=1,rel_heights = c(1.1,2),label_size = 18)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=1,rel_heights = c(1.1,2),label_size = 16)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=1,rel_heights = c(1.1,2),label_size = 16,label_x = 0, label_y = 0,
hjust = -0.5, vjust = -0.5)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=1,rel_heights = c(1.1,2),label_size = 16,hjust = -0.5, vjust = -0.5)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=1,rel_heights = c(1.1,2),label_size = 16,vjust = -0.5)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=1,rel_heights = c(1.1,2),label_size = 16,vjust = 0.1)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=2,rel_heights = c(1.1,2),label_size = 16)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=2,rel_widths = c(1,2),label_size = 16)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 10, height = 14)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 12, height = 6)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 14, height = 7)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=2,rel_widths = c(1,2.1),label_size = 16)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 14, height = 7)
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=2,rel_widths = c(0.8,2),label_size = 16)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 14, height = 7)
# Create behavioral data figure.
behav_fig <-
ggplot(rt_summary, aes(CondNum, corrected_rt, fill=Condition)) +
geom_boxplot(aes(group=Condition,fill=Condition),width=0.4,color="black") +
#geom_bar(stat="summary",width=0.4,aes(group=Condition,fill=Condition)) +
geom_point(data=rt_summary,aes(x=xPos),color="black") +
geom_line(data=rt_summary,aes(group=subject_nr,x=xPos),stat="summary",color="black") +
#geom_errorbar(data=rt_summary_byGroup,aes(ymax=corrected_rt+ci, ymin = corrected_rt-ci), width = 0.2) +
stat_summary(fun=mean, geom="point", shape=1, size=3,color="black") +
scale_x_continuous("Condition",breaks=c(1,2),labels=c("Blocked","Mixed")) +
scale_fill_manual(values=c("#ff6e26","#26b7ff")) +
facet_rep_wrap(.~exp_renum,ncol=2,repeat.tick.labels=TRUE) +
labs(y = "Reaction time (ms)") + coord_cartesian(ylim = c(375,725)) +
theme(legend.position = "none",strip.text = element_text(size = 16),text=element_text(size=22))
MTPC <-
ggplot(rt_differences,aes(x=as.factor(exp_renum),y=diff)) +
geom_bar(stat="identity",fill="#4b4f57") + geom_errorbar(aes(ymax=diff+se,ymin=diff-se),color="black",width=0.5) +
labs(y="Multi-talker processing cost (ms)", x="Experiment") +
theme(legend.position = "none",text=element_text(size=22)) + coord_cartesian(ylim=c(0,30)) +
geom_signif(xmin=1,xmax=1,y_position=27,tip_length=0,annotation ="*",textsize=8,color="black") +
geom_signif(xmin=3,xmax=3,y_position=27,tip_length=0,annotation ="*",textsize=8,color="black")
# Cowplot them together.
plot_grid(MTPC,behav_fig,labels="AUTO",ncol=2,rel_widths = c(0.8,2),label_size = 20)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 14, height = 7)
ggsave("plot.png",device="png",type="cairo",dpi="retina",width = 14, height = 8)
binom.test(29,44)
View(rt_differences)
View(rt_summary)
View(rt_differences)
View(rt_summary)
rt_differences <- Rmisc::summarySE(rt_differences,measurevar = "diff",groupvars = c("subject_nr","exp_renum"))
View(rt_differences)
# Create summary barplot of each exp_renumeriment's MTPC.
rt_differences <- rt_summary %>% select(subject_nr,exp_renum,Condition,corrected_rt) %>% spread(Condition,corrected_rt,drop=T)
View(rt_differences)
rt_differences$diff <- rt_differences$Mixed-rt_differences$Blocked
View(rt_differences)
table(rt_differences)
table(rt_differences$diff)
count(rt_differences$diff<0)
rt_differences$diff<0
table(rt_differences$diff<0)
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes = table(rt_differences$diff<0))
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes = table(rt_differences$diff<0))
View(foo)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% table(rt_differences$diff<0))
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% table(rt_differences$diff<0)
rt_differences %>% group_by(exp_renum) %>% table(rt_differences$diff<0)
rt_differences %>% group_by(exp_renum)
length(rt_differences<0==T)
length(rt_differences<0=T)
length(rt_differences<0)
length(rt_differences$diff<0==T)
length(rt_differences$diff<0)
length(which(rt_differences$diff<0))
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% length(which(rt_differences$diff<0))
length(which(rt_differences$diff<0))
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=length(which(rt_differences$diff<0)))
View(foo)
View(rt_differences)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=length(which(rt_differences$diff<0)),.groups="keep")
View(foo)
View(rt_differences)
View(rt_differences)
length(which(rt_differences$diff<0)
length(which(rt_differences$diff<0))
length(which(rt_differences$diff<0))
rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=length(which(rt_differences$diff<0)))
which(rt_differences$diff<0)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=length(rt_differences$diff<0))
View(foo)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
table(rt_differences$diff<0)["TRUE"]
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(subject_nr,exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
View(rt_differences)
# Binomial testing of MTPC
foo <- rt_differences %>% dplyr::group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
# Binomial testing of MTPC
foo <- rt_differences %>% dplyr::group_by(exp_renum) %>% dplyr::summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% mutate(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
View(foo)
Load packages.
# Data manipulation.
library(data.table)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
library(parallel)
# Plots.
library(ggplot2)
library(cowplot)
library(ggsignif)
library(lemon)
# Analyses.
library(afex)
library(lme4)
theme_set(theme_bw())
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
View(rt_summary)
foo <- rt_differences %>% filter(exp_renum=="Experiment 1   Standard design") %>% summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
View(rt_differences)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
setwd("C:/Users/David/Desktop/GitHubRepos/TalkerTeam-Mapping/analysis")
table(rt_differences)
rm(list = ls(all = TRUE))
# Load packages.
# Data manipulation.
library(data.table)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
library(parallel)
# Plots.
library(ggplot2)
library(cowplot)
library(ggsignif)
library(lemon)
# Analyses.
library(afex)
library(lme4)
theme_set(theme_bw())
# df <- lapply(list.files(path = ".", pattern = "*.csv", all.files = FALSE,
#                         full.names = FALSE, recursive = FALSE), read.csv, header=TRUE)
# set WD to data folder.
setwd("./data")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
df <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
data$response <- lead(data$response_response, 1) #shifts responses one row up since OpenSesame logs them a row down
data$response_time <- lead(data$response_time_response, 1) #shifts RTs one row up since OpenSesame logs them a row down
df <- rbind(df, data,fill=T)
}
#### Clean up data. ####
# Remove errant row created in previous step
df <- subset(df,subject_nr!=1)
# Remove columns related to audio onset that were in for debugging purposes
df <- select(df,-9:-26)
# Remove columns where responses/RTs were logged incorrectly by OpenSesame
df <- select(df,-6:-7)
# Create variable to indicate if it was male or female talker on trial
df$gender <- ifelse(grepl("M_",df$current_stimulus),"Male","Female")
# Create variable to indicate which experiment this was
df$exp_orig <- substr(df$subject_nr,1,1) #first digit of subject number indicates experiment number
# Renumbered experiments for manuscript
df$exp_renum <- NA
df$exp_renum[which(df$exp_orig == 1)] <- 1
df$exp_renum[which(df$exp_orig == 2)] <- 4
df$exp_renum[which(df$exp_orig == 3)] <- 3
df$exp_renum[which(df$exp_orig == 4)] <- 2
# Indicate which item number this was within a trial
df$itemNo <- row(as.matrix(df$current_stimulus)) %% 16; df$itemNo[which(df$itemNo==0)] <- 16
# Indicate if there is a talker change for this item (is preceding item spoken by same talker?)
df$change <- ifelse(lag(df$gender) == df$gender,"no","yes")
# Create variable to add row number for next step
df <- df[order(as.numeric(Trial)),]
df <- df[order(subject_nr),]
df$row <- as.numeric(1:length(df$Trial))
# Responses within lag time (150 ms in M&N 2007) are counted as responses to the previous item
df$corrected_rt <- as.numeric(df$response_time)
df$corrected_rt[which(df$response_time<=150 & df$itemNo > 1)-1] <- df$corrected_rt[which(df$response_time<=150 & df$itemNo > 1)] + 750
df$corrected_rt[which(df$corrected_rt<=150)] <- NA
df <- df %>% drop_na(response)
# Keep only trials in which audio matches target.
df$trial_stimulus <- substr(df$current_stimulus,3,nchar(df$current_stimulus)-4)
df$trialtype <- ifelse(df$Target==df$trial_stimulus,"Target","Distractor")
# Calculate accuracy in obvious way.
df$accuracy <- ifelse(df$trialtype=="Target"&df$response=="space"|df$trialtype=="Distractor"&df$response=="None",1,0)
# Separate target trials for RT analysis.
target.trials <- subset(df,df$Target==df$trial_stimulus)
# Remove target trials where participants hit wrong key.
target.trials <- subset(target.trials,target.trials$response=="None"|target.trials$response=="space")
# Keep trials where participant responded immediately after the target trial.
a <- (which(df$Target==df$trial_stimulus&df$response=="None")+1)
missed.targets <- df[a]
missed.targets <- subset(missed.targets, as.numeric(response_time) <= 150)
# Calculate accuracy for complex trials (response in trial after target)
df$accuracy <- ifelse(df$row %in% missed.targets$row,NA,df$accuracy)
df$accuracy <- ifelse(df$row %in% (missed.targets$row-1),1,df$accuracy)
# Remove trials where participants didn't respond in the post-target trial.
# b <- (which(missed.targets$response=="None"))
# c <- missed.targets[b,row]-1
# target.trials <- subset(target.trials,!(row %in% c))
missed.targets <- subset(missed.targets,response=="space")
# Combine these together into single data frame.
critical.trials <- rbind(target.trials,missed.targets)
# Set variables as appropriate types.
critical.trials$Condition <- as.factor(critical.trials$Condition)
critical.trials$Talker <- as.factor(critical.trials$Talker)
critical.trials$response <- as.factor(critical.trials$response)
critical.trials$response_time <- as.numeric(critical.trials$response_time)
critical.trials$subject_nr <- as.factor(critical.trials$subject_nr)
# Order by row number.
critical.trials <- critical.trials[order(row),]
#  Now we can now remove the trials after the target.
critical.trials <- subset(na.omit(critical.trials),Target==trial_stimulus)
#### Outcomes of interest. ####
# Calculate accuracy.
performance <- df %>%
group_by(subject_nr,exp_renum) %>%
summarize(acc=mean(na.omit(accuracy)))
exclude <- filter(performance,acc<=0.9)
critical.trials <- droplevels(critical.trials %>%
filter(!subject_nr %in% exclude$subject_nr))
df.goodSubj <- droplevels(df %>%
filter(!subject_nr %in% exclude$subject_nr))
# Average performance by experiment.
avg.performance <- df.goodSubj %>%
group_by(exp_renum) %>%
summarize(acc=mean(na.omit(accuracy)))
# Range
performance %>% group_by(exp_renum) %>%
filter(acc>=0.9) %>%
summarise(low=min(acc),high=max(acc))
# Calculate reaction time by condition and talker.
rt <- critical.trials %>%
group_by(exp_renum, Condition) %>%
summarise(rt=mean(corrected_rt),SD=sd(corrected_rt))
#rt <- Rmisc::summarySE(critical.trials,measurevar = "corrected_rt",groupvars = c("exp_renum","Condition"))
#### Plots####
# What is distribution of RTs?
ggplot(critical.trials, aes(corrected_rt)) + geom_density()
ggplot(critical.trials, aes(log(corrected_rt))) + geom_density()
# non-transformed RTs look reasonable
# Visualize RTs by subjects
qqnorm(critical.trials$corrected_rt); qqline(critical.trials$corrected_rt);
qqnorm(log(critical.trials$corrected_rt)); qqline(log(critical.trials$corrected_rt));
# Plotting prep
# Mean RTs by subject
rt_summary <- Rmisc::summarySE(data = critical.trials, measurevar = "corrected_rt",
groupvars = c("subject_nr","exp_renum", "Condition"), na.rm = TRUE)
# Create variable with exp_renumeriment labels.
rt_summary$exp_renum <- as.factor(rt_summary$exp_renum)
levels(rt_summary$exp_renum) <- c("Experiment 1 \n Standard design",
"Experiment 2 \n Targets never recycled as distractors and \n targets produced by one talker \n on each mixed-talker trial",
"Experiment 3 \n Targets never recycled as distractors",
"Experiment 4 \n Targets produced by one talker \n on each mixed-talker trial")
# For plotting purposes, create numeric version of condition and variable to allow for offsetting of points
rt_summary$CondNum <- ifelse(rt_summary$Condition=="Blocked",1,2)
rt_summary$xPos <- ifelse(rt_summary$Condition=="Blocked",1.25,1.75)
# Mean RTs by group to get CI's for error bar
rt_summary_byGroup <- Rmisc::summarySE(data = critical.trials, measurevar = "corrected_rt",
groupvars = c("exp_renum", "Condition"), na.rm = TRUE)
rt_summary_byGroup$CondNum <- ifelse(rt_summary_byGroup$Condition=="Blocked",1,2)
levels(rt_summary_byGroup$exp_renum) <- c("Experiment 1 \n Standard design",
"Experiment 2 \n Targets never recycled as distractors and \n targets produced by one talker \n on each mixed-talker trial",
"Experiment 3 \n Targets never recycled as distractors",
"Experiment 4 \n Targets produced by one talker \n on each mixed-talker trial")
# Create behavioral data figure.
behav_fig <-
ggplot(rt_summary, aes(CondNum, corrected_rt, fill=Condition)) +
geom_boxplot(aes(group=Condition,fill=Condition),width=0.4,color="black") +
#geom_bar(stat="summary",width=0.4,aes(group=Condition,fill=Condition)) +
geom_point(data=rt_summary,aes(x=xPos),color="black") +
geom_line(data=rt_summary,aes(group=subject_nr,x=xPos),stat="summary",color="black") +
#geom_errorbar(data=rt_summary_byGroup,aes(ymax=corrected_rt+ci, ymin = corrected_rt-ci), width = 0.2) +
stat_summary(fun=mean, geom="point", shape=1, size=3,color="black") +
scale_x_continuous("Condition",breaks=c(1,2),labels=c("Blocked","Mixed")) +
scale_fill_manual(values=c("#ff6e26","#26b7ff")) +
facet_rep_wrap(.~exp_renum,ncol=2,repeat.tick.labels=TRUE) +
labs(y = "Reaction time (ms)") + coord_cartesian(ylim = c(375,725)) +
theme(legend.position = "none",strip.text = element_text(size = 16),text=element_text(size=22))
ggsave("behav_fig.png",device="png",type="cairo",dpi="retina",width = 10, height = 7)
# Create summary barplot of each exp_renumeriment's MTPC.
rt_differences <- rt_summary %>% select(subject_nr,exp_renum,Condition,corrected_rt) %>% spread(Condition,corrected_rt,drop=T)
rt_differences$diff <- rt_differences$Mixed-rt_differences$Blocked
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff<0)["TRUE"])
View(foo)
View(rt_differences)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff>0)["TRUE"])
View(rt_differences)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff>0)["TRUE"])
View(foo)
View(foo)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=sum(rt_differences$diff>0)["TRUE"])
View(exclude)
View(foo)
sum(rt_differences$diff>0)
# Binomial testing of MTPC
foo <- rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=sum(rt_differences$diff>0)["TRUE"],.groups="rowwise")
rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=sum(rt_differences$diff>0)["TRUE"],.groups="rowwise")
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=sum(rt_differences$diff>0)["TRUE"],.groups="rowwise")
summarize(MTPCyes=sum(rt_differences$diff>0)["TRUE"],.groups="rowwise")
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes=sum(rt_differences$diff>0)["TRUE"],.groups="rowwise")
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes=sum(rt_differences$diff>0)["TRUE"],.groups="drop")
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff>0)["TRUE"],.groups="rowwise")
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff>0)["TRUE"],.groups="drop")
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff>0)["TRUE"],.groups="keep")
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarize(MTPCyes=table(rt_differences$diff>0)["TRUE"])
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes=table(rt_differences$diff>0)["TRUE"])
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes=table(rt_differences$diff>0)["TRUE"]))
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes=table(rt_differences$diff>0)["TRUE"])
# Binomial testing of MTPC
rt_differences %>% group_by(exp_renum) %>% summarise(MTPCyes=table(rt_differences$diff>0)["TRUE"])
# Binomial testing of MTPC
rt_differences %>% dplyr::group_by(exp_renum) %>% dplyr::summarise(MTPCyes=table(rt_differences$diff>0)["TRUE"])
# Binomial testing of MTPC
rt_differences %>% dplyr::group_by(exp_renum) %>% dplyr::summarise(MTPCyes=table(rt_differences$diff>0)["TRUE"])
# Binomial testing of MTPC
rt_differences %>% dplyr::group_by(exp_renum) %>% dplyr::summarise(MTPCyes=table(rt_differences$diff>0)["TRUE"])
sum(rt_differences$diff>0)
install.packages(c("backports", "bayestestR", "broom", "cli", "colorspace", "cowplot", "data.table", "diffobj", "digest", "emmeans", "ggplot2", "ggrepel", "here", "insight", "isoband", "janitor", "jsonlite", "lme4", "lmerTest", "lubridate", "magrittr", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "RcppArmadillo", "RcppEigen", "readr", "rlang", "rmarkdown", "spam", "statmod", "testthat", "tibble", "tinytex", "vctrs", "xfun"))
table(rt_differences$exp_renum,rt_differences$diff>0))
table(rt_differences$exp_renum,rt_differences$diff>0)
table(rt_differences$exp_renum,rt_differences$diff>0)["TRUE"]
table(rt_differences$exp_renum,rt_differences$diff>0)[TRUE]
table(rt_differences$exp_renum,rt_differences$diff>0)[2]
table(rt_differences$exp_renum,rt_differences$diff>0)[,2]
# Binomial testing of MTPC
rt_differences %>% dplyr::group_by(exp_renum) %>% dplyr::summarise(MTPCyes=table(rt_differences$exp_renum,rt_differences$diff>0)[,2])
# Binomial testing of MTPC
rt_differences %>% dplyr::summarise(MTPCyes=table(rt_differences$exp_renum,rt_differences$diff>0)[,2])
# Binomial testing of MTPC
rt_differences %>% dplyr::summarise(MTPCyes=table(rt_differences$exp_renum,rt_differences$diff>0)[,2])
# Binomial testing of MTPC
table(rt_differences$exp_renum,rt_differences$diff>0))
# Binomial testing of MTPC
table(rt_differences$exp_renum,rt_differences$diff>0)
binom.test(33,44)
binom.test(24,44)
binom.test(33,44)
binom.test(22,44)
0
# Binomial testing of MTPC
table(rt_differences$exp_renum,rt_differences$diff>0)
View(rt_differences)
levels(rt_differences$exp_renum) <- c("Exp. 1",
"Exp. 2",
"Exp. 3",
"Exp. 4")
# Binomial testing of MTPC
table(rt_differences$exp_renum,rt_differences$diff>0)
binom.test(33,44)
binom.test(33,44)
?table
